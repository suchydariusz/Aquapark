#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AquaparkDB")]
	public partial class AquaparkDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttbl_Attraction(tbl_Attraction instance);
    partial void Updatetbl_Attraction(tbl_Attraction instance);
    partial void Deletetbl_Attraction(tbl_Attraction instance);
    partial void Inserttbl_Gate(tbl_Gate instance);
    partial void Updatetbl_Gate(tbl_Gate instance);
    partial void Deletetbl_Gate(tbl_Gate instance);
    partial void Inserttbl_Pass(tbl_Pass instance);
    partial void Updatetbl_Pass(tbl_Pass instance);
    partial void Deletetbl_Pass(tbl_Pass instance);
    partial void Inserttbl_PriceList(tbl_PriceList instance);
    partial void Updatetbl_PriceList(tbl_PriceList instance);
    partial void Deletetbl_PriceList(tbl_PriceList instance);
    partial void Inserttbl_RFIDWatch(tbl_RFIDWatch instance);
    partial void Updatetbl_RFIDWatch(tbl_RFIDWatch instance);
    partial void Deletetbl_RFIDWatch(tbl_RFIDWatch instance);
    partial void Inserttbl_Client(tbl_Client instance);
    partial void Updatetbl_Client(tbl_Client instance);
    partial void Deletetbl_Client(tbl_Client instance);
    partial void Inserttbl_PriceListAttraction(tbl_PriceListAttraction instance);
    partial void Updatetbl_PriceListAttraction(tbl_PriceListAttraction instance);
    partial void Deletetbl_PriceListAttraction(tbl_PriceListAttraction instance);
    partial void Inserttbl_PriceHistory(tbl_PriceHistory instance);
    partial void Updatetbl_PriceHistory(tbl_PriceHistory instance);
    partial void Deletetbl_PriceHistory(tbl_PriceHistory instance);
    partial void Inserttbl_AttractionHistory(tbl_AttractionHistory instance);
    partial void Updatetbl_AttractionHistory(tbl_AttractionHistory instance);
    partial void Deletetbl_AttractionHistory(tbl_AttractionHistory instance);
    partial void Inserttbl_GateHistory(tbl_GateHistory instance);
    partial void Updatetbl_GateHistory(tbl_GateHistory instance);
    partial void Deletetbl_GateHistory(tbl_GateHistory instance);
    partial void Inserttbl_Visit(tbl_Visit instance);
    partial void Updatetbl_Visit(tbl_Visit instance);
    partial void Deletetbl_Visit(tbl_Visit instance);
    #endregion
		
		public AquaparkDBDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.AquaparkDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AquaparkDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AquaparkDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AquaparkDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AquaparkDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbl_Attraction> tbl_Attractions
		{
			get
			{
				return this.GetTable<tbl_Attraction>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Gate> tbl_Gates
		{
			get
			{
				return this.GetTable<tbl_Gate>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Pass> tbl_Passes
		{
			get
			{
				return this.GetTable<tbl_Pass>();
			}
		}
		
		public System.Data.Linq.Table<tbl_PriceList> tbl_PriceLists
		{
			get
			{
				return this.GetTable<tbl_PriceList>();
			}
		}
		
		public System.Data.Linq.Table<tbl_RFIDWatch> tbl_RFIDWatches
		{
			get
			{
				return this.GetTable<tbl_RFIDWatch>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Client> tbl_Clients
		{
			get
			{
				return this.GetTable<tbl_Client>();
			}
		}
		
		public System.Data.Linq.Table<tbl_PriceListAttraction> tbl_PriceListAttractions
		{
			get
			{
				return this.GetTable<tbl_PriceListAttraction>();
			}
		}
		
		public System.Data.Linq.Table<tbl_PriceHistory> tbl_PriceHistories
		{
			get
			{
				return this.GetTable<tbl_PriceHistory>();
			}
		}
		
		public System.Data.Linq.Table<tbl_AttractionHistory> tbl_AttractionHistories
		{
			get
			{
				return this.GetTable<tbl_AttractionHistory>();
			}
		}
		
		public System.Data.Linq.Table<tbl_GateHistory> tbl_GateHistories
		{
			get
			{
				return this.GetTable<tbl_GateHistory>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Visit> tbl_Visits
		{
			get
			{
				return this.GetTable<tbl_Visit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Attraction")]
	public partial class tbl_Attraction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tbl_Gate> _tbl_Gates;
		
		private EntitySet<tbl_PriceListAttraction> _tbl_PriceListAttractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tbl_Attraction()
		{
			this._tbl_Gates = new EntitySet<tbl_Gate>(new Action<tbl_Gate>(this.attach_tbl_Gates), new Action<tbl_Gate>(this.detach_tbl_Gates));
			this._tbl_PriceListAttractions = new EntitySet<tbl_PriceListAttraction>(new Action<tbl_PriceListAttraction>(this.attach_tbl_PriceListAttractions), new Action<tbl_PriceListAttraction>(this.detach_tbl_PriceListAttractions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Attraction_tbl_Gate", Storage="_tbl_Gates", ThisKey="ID", OtherKey="IDAttraction")]
		public EntitySet<tbl_Gate> tbl_Gates
		{
			get
			{
				return this._tbl_Gates;
			}
			set
			{
				this._tbl_Gates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Attraction_tbl_PriceListAttraction", Storage="_tbl_PriceListAttractions", ThisKey="ID", OtherKey="IDAttraction")]
		public EntitySet<tbl_PriceListAttraction> tbl_PriceListAttractions
		{
			get
			{
				return this._tbl_PriceListAttractions;
			}
			set
			{
				this._tbl_PriceListAttractions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Gates(tbl_Gate entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Attraction = this;
		}
		
		private void detach_tbl_Gates(tbl_Gate entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Attraction = null;
		}
		
		private void attach_tbl_PriceListAttractions(tbl_PriceListAttraction entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Attraction = this;
		}
		
		private void detach_tbl_PriceListAttractions(tbl_PriceListAttraction entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Attraction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Gate")]
	public partial class tbl_Gate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Type;
		
		private int _IDAttraction;
		
		private EntitySet<tbl_GateHistory> _tbl_GateHistories;
		
		private EntityRef<tbl_Attraction> _tbl_Attraction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(bool value);
    partial void OnTypeChanged();
    partial void OnIDAttractionChanging(int value);
    partial void OnIDAttractionChanged();
    #endregion
		
		public tbl_Gate()
		{
			this._tbl_GateHistories = new EntitySet<tbl_GateHistory>(new Action<tbl_GateHistory>(this.attach_tbl_GateHistories), new Action<tbl_GateHistory>(this.detach_tbl_GateHistories));
			this._tbl_Attraction = default(EntityRef<tbl_Attraction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Bit NOT NULL")]
		public bool Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAttraction", DbType="Int NOT NULL")]
		public int IDAttraction
		{
			get
			{
				return this._IDAttraction;
			}
			set
			{
				if ((this._IDAttraction != value))
				{
					if (this._tbl_Attraction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAttractionChanging(value);
					this.SendPropertyChanging();
					this._IDAttraction = value;
					this.SendPropertyChanged("IDAttraction");
					this.OnIDAttractionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Gate_tbl_GateHistory", Storage="_tbl_GateHistories", ThisKey="ID", OtherKey="IDGate")]
		public EntitySet<tbl_GateHistory> tbl_GateHistories
		{
			get
			{
				return this._tbl_GateHistories;
			}
			set
			{
				this._tbl_GateHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Attraction_tbl_Gate", Storage="_tbl_Attraction", ThisKey="IDAttraction", OtherKey="ID", IsForeignKey=true)]
		public tbl_Attraction tbl_Attraction
		{
			get
			{
				return this._tbl_Attraction.Entity;
			}
			set
			{
				tbl_Attraction previousValue = this._tbl_Attraction.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Attraction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Attraction.Entity = null;
						previousValue.tbl_Gates.Remove(this);
					}
					this._tbl_Attraction.Entity = value;
					if ((value != null))
					{
						value.tbl_Gates.Add(this);
						this._IDAttraction = value.ID;
					}
					else
					{
						this._IDAttraction = default(int);
					}
					this.SendPropertyChanged("tbl_Attraction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_GateHistories(tbl_GateHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Gate = this;
		}
		
		private void detach_tbl_GateHistories(tbl_GateHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Gate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Pass")]
	public partial class tbl_Pass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _WhenEnds;
		
		private int _IDClient;
		
		private EntitySet<tbl_Visit> _tbl_Visits;
		
		private EntityRef<tbl_Client> _tbl_Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWhenEndsChanging(System.DateTime value);
    partial void OnWhenEndsChanged();
    partial void OnIDClientChanging(int value);
    partial void OnIDClientChanged();
    #endregion
		
		public tbl_Pass()
		{
			this._tbl_Visits = new EntitySet<tbl_Visit>(new Action<tbl_Visit>(this.attach_tbl_Visits), new Action<tbl_Visit>(this.detach_tbl_Visits));
			this._tbl_Client = default(EntityRef<tbl_Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhenEnds", DbType="Date NOT NULL")]
		public System.DateTime WhenEnds
		{
			get
			{
				return this._WhenEnds;
			}
			set
			{
				if ((this._WhenEnds != value))
				{
					this.OnWhenEndsChanging(value);
					this.SendPropertyChanging();
					this._WhenEnds = value;
					this.SendPropertyChanged("WhenEnds");
					this.OnWhenEndsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDClient", DbType="Int NOT NULL")]
		public int IDClient
		{
			get
			{
				return this._IDClient;
			}
			set
			{
				if ((this._IDClient != value))
				{
					if (this._tbl_Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDClientChanging(value);
					this.SendPropertyChanging();
					this._IDClient = value;
					this.SendPropertyChanged("IDClient");
					this.OnIDClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Pass_tbl_Visit", Storage="_tbl_Visits", ThisKey="ID", OtherKey="IDPass")]
		public EntitySet<tbl_Visit> tbl_Visits
		{
			get
			{
				return this._tbl_Visits;
			}
			set
			{
				this._tbl_Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Client_tbl_Pass", Storage="_tbl_Client", ThisKey="IDClient", OtherKey="ID", IsForeignKey=true)]
		public tbl_Client tbl_Client
		{
			get
			{
				return this._tbl_Client.Entity;
			}
			set
			{
				tbl_Client previousValue = this._tbl_Client.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Client.Entity = null;
						previousValue.tbl_Passes.Remove(this);
					}
					this._tbl_Client.Entity = value;
					if ((value != null))
					{
						value.tbl_Passes.Add(this);
						this._IDClient = value.ID;
					}
					else
					{
						this._IDClient = default(int);
					}
					this.SendPropertyChanged("tbl_Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Visits(tbl_Visit entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Pass = this;
		}
		
		private void detach_tbl_Visits(tbl_Visit entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Pass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_PriceList")]
	public partial class tbl_PriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Entry;
		
		private double _Price;
		
		private EntitySet<tbl_PriceHistory> _tbl_PriceHistories;
		
		private EntitySet<tbl_Visit> _tbl_Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntryChanging(string value);
    partial void OnEntryChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    #endregion
		
		public tbl_PriceList()
		{
			this._tbl_PriceHistories = new EntitySet<tbl_PriceHistory>(new Action<tbl_PriceHistory>(this.attach_tbl_PriceHistories), new Action<tbl_PriceHistory>(this.detach_tbl_PriceHistories));
			this._tbl_Visits = new EntitySet<tbl_Visit>(new Action<tbl_Visit>(this.attach_tbl_Visits), new Action<tbl_Visit>(this.detach_tbl_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Entry
		{
			get
			{
				return this._Entry;
			}
			set
			{
				if ((this._Entry != value))
				{
					this.OnEntryChanging(value);
					this.SendPropertyChanging();
					this._Entry = value;
					this.SendPropertyChanged("Entry");
					this.OnEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_PriceList_tbl_PriceHistory", Storage="_tbl_PriceHistories", ThisKey="ID", OtherKey="IDPriceList")]
		public EntitySet<tbl_PriceHistory> tbl_PriceHistories
		{
			get
			{
				return this._tbl_PriceHistories;
			}
			set
			{
				this._tbl_PriceHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_PriceList_tbl_Visit", Storage="_tbl_Visits", ThisKey="ID", OtherKey="IDPriceEntry")]
		public EntitySet<tbl_Visit> tbl_Visits
		{
			get
			{
				return this._tbl_Visits;
			}
			set
			{
				this._tbl_Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_PriceHistories(tbl_PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_PriceList = this;
		}
		
		private void detach_tbl_PriceHistories(tbl_PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_PriceList = null;
		}
		
		private void attach_tbl_Visits(tbl_Visit entity)
		{
			this.SendPropertyChanging();
			entity.tbl_PriceList = this;
		}
		
		private void detach_tbl_Visits(tbl_Visit entity)
		{
			this.SendPropertyChanging();
			entity.tbl_PriceList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_RFIDWatch")]
	public partial class tbl_RFIDWatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Status;
		
		private EntitySet<tbl_Visit> _tbl_Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public tbl_RFIDWatch()
		{
			this._tbl_Visits = new EntitySet<tbl_Visit>(new Action<tbl_Visit>(this.attach_tbl_Visits), new Action<tbl_Visit>(this.detach_tbl_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_RFIDWatch_tbl_Visit", Storage="_tbl_Visits", ThisKey="ID", OtherKey="IDWatch")]
		public EntitySet<tbl_Visit> tbl_Visits
		{
			get
			{
				return this._tbl_Visits;
			}
			set
			{
				this._tbl_Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Visits(tbl_Visit entity)
		{
			this.SendPropertyChanging();
			entity.tbl_RFIDWatch = this;
		}
		
		private void detach_tbl_Visits(tbl_Visit entity)
		{
			this.SendPropertyChanging();
			entity.tbl_RFIDWatch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Client")]
	public partial class tbl_Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _PESEL;
		
		private EntitySet<tbl_Pass> _tbl_Passes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    #endregion
		
		public tbl_Client()
		{
			this._tbl_Passes = new EntitySet<tbl_Pass>(new Action<tbl_Pass>(this.attach_tbl_Passes), new Action<tbl_Pass>(this.detach_tbl_Passes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Client_tbl_Pass", Storage="_tbl_Passes", ThisKey="ID", OtherKey="IDClient")]
		public EntitySet<tbl_Pass> tbl_Passes
		{
			get
			{
				return this._tbl_Passes;
			}
			set
			{
				this._tbl_Passes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Passes(tbl_Pass entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Client = this;
		}
		
		private void detach_tbl_Passes(tbl_Pass entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_PriceListAttraction")]
	public partial class tbl_PriceListAttraction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private double _PriceAttraction;
		
		private int _IDAttraction;
		
		private EntitySet<tbl_AttractionHistory> _tbl_AttractionHistories;
		
		private EntityRef<tbl_Attraction> _tbl_Attraction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPriceAttractionChanging(double value);
    partial void OnPriceAttractionChanged();
    partial void OnIDAttractionChanging(int value);
    partial void OnIDAttractionChanged();
    #endregion
		
		public tbl_PriceListAttraction()
		{
			this._tbl_AttractionHistories = new EntitySet<tbl_AttractionHistory>(new Action<tbl_AttractionHistory>(this.attach_tbl_AttractionHistories), new Action<tbl_AttractionHistory>(this.detach_tbl_AttractionHistories));
			this._tbl_Attraction = default(EntityRef<tbl_Attraction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceAttraction", DbType="Float NOT NULL")]
		public double PriceAttraction
		{
			get
			{
				return this._PriceAttraction;
			}
			set
			{
				if ((this._PriceAttraction != value))
				{
					this.OnPriceAttractionChanging(value);
					this.SendPropertyChanging();
					this._PriceAttraction = value;
					this.SendPropertyChanged("PriceAttraction");
					this.OnPriceAttractionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAttraction", DbType="Int NOT NULL")]
		public int IDAttraction
		{
			get
			{
				return this._IDAttraction;
			}
			set
			{
				if ((this._IDAttraction != value))
				{
					if (this._tbl_Attraction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAttractionChanging(value);
					this.SendPropertyChanging();
					this._IDAttraction = value;
					this.SendPropertyChanged("IDAttraction");
					this.OnIDAttractionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_PriceListAttraction_tbl_AttractionHistory", Storage="_tbl_AttractionHistories", ThisKey="ID", OtherKey="IDAttractionList")]
		public EntitySet<tbl_AttractionHistory> tbl_AttractionHistories
		{
			get
			{
				return this._tbl_AttractionHistories;
			}
			set
			{
				this._tbl_AttractionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Attraction_tbl_PriceListAttraction", Storage="_tbl_Attraction", ThisKey="IDAttraction", OtherKey="ID", IsForeignKey=true)]
		public tbl_Attraction tbl_Attraction
		{
			get
			{
				return this._tbl_Attraction.Entity;
			}
			set
			{
				tbl_Attraction previousValue = this._tbl_Attraction.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Attraction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Attraction.Entity = null;
						previousValue.tbl_PriceListAttractions.Remove(this);
					}
					this._tbl_Attraction.Entity = value;
					if ((value != null))
					{
						value.tbl_PriceListAttractions.Add(this);
						this._IDAttraction = value.ID;
					}
					else
					{
						this._IDAttraction = default(int);
					}
					this.SendPropertyChanged("tbl_Attraction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_AttractionHistories(tbl_AttractionHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_PriceListAttraction = this;
		}
		
		private void detach_tbl_AttractionHistories(tbl_AttractionHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_PriceListAttraction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_PriceHistory")]
	public partial class tbl_PriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private int _IDPriceList;
		
		private string _TicketName;
		
		private double _TicketPrice;
		
		private EntityRef<tbl_PriceList> _tbl_PriceList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIDPriceListChanging(int value);
    partial void OnIDPriceListChanged();
    partial void OnTicketNameChanging(string value);
    partial void OnTicketNameChanged();
    partial void OnTicketPriceChanging(double value);
    partial void OnTicketPriceChanged();
    #endregion
		
		public tbl_PriceHistory()
		{
			this._tbl_PriceList = default(EntityRef<tbl_PriceList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPriceList", DbType="Int NOT NULL")]
		public int IDPriceList
		{
			get
			{
				return this._IDPriceList;
			}
			set
			{
				if ((this._IDPriceList != value))
				{
					if (this._tbl_PriceList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPriceListChanging(value);
					this.SendPropertyChanging();
					this._IDPriceList = value;
					this.SendPropertyChanged("IDPriceList");
					this.OnIDPriceListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TicketName
		{
			get
			{
				return this._TicketName;
			}
			set
			{
				if ((this._TicketName != value))
				{
					this.OnTicketNameChanging(value);
					this.SendPropertyChanging();
					this._TicketName = value;
					this.SendPropertyChanged("TicketName");
					this.OnTicketNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketPrice", DbType="Float NOT NULL")]
		public double TicketPrice
		{
			get
			{
				return this._TicketPrice;
			}
			set
			{
				if ((this._TicketPrice != value))
				{
					this.OnTicketPriceChanging(value);
					this.SendPropertyChanging();
					this._TicketPrice = value;
					this.SendPropertyChanged("TicketPrice");
					this.OnTicketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_PriceList_tbl_PriceHistory", Storage="_tbl_PriceList", ThisKey="IDPriceList", OtherKey="ID", IsForeignKey=true)]
		public tbl_PriceList tbl_PriceList
		{
			get
			{
				return this._tbl_PriceList.Entity;
			}
			set
			{
				tbl_PriceList previousValue = this._tbl_PriceList.Entity;
				if (((previousValue != value) 
							|| (this._tbl_PriceList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_PriceList.Entity = null;
						previousValue.tbl_PriceHistories.Remove(this);
					}
					this._tbl_PriceList.Entity = value;
					if ((value != null))
					{
						value.tbl_PriceHistories.Add(this);
						this._IDPriceList = value.ID;
					}
					else
					{
						this._IDPriceList = default(int);
					}
					this.SendPropertyChanged("tbl_PriceList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_AttractionHistory")]
	public partial class tbl_AttractionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private int _IDAttractionList;
		
		private string _AttractionName;
		
		private double _AttractionPrice;
		
		private EntityRef<tbl_PriceListAttraction> _tbl_PriceListAttraction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIDAttractionListChanging(int value);
    partial void OnIDAttractionListChanged();
    partial void OnAttractionNameChanging(string value);
    partial void OnAttractionNameChanged();
    partial void OnAttractionPriceChanging(double value);
    partial void OnAttractionPriceChanged();
    #endregion
		
		public tbl_AttractionHistory()
		{
			this._tbl_PriceListAttraction = default(EntityRef<tbl_PriceListAttraction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAttractionList", DbType="Int NOT NULL")]
		public int IDAttractionList
		{
			get
			{
				return this._IDAttractionList;
			}
			set
			{
				if ((this._IDAttractionList != value))
				{
					if (this._tbl_PriceListAttraction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAttractionListChanging(value);
					this.SendPropertyChanging();
					this._IDAttractionList = value;
					this.SendPropertyChanged("IDAttractionList");
					this.OnIDAttractionListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AttractionName
		{
			get
			{
				return this._AttractionName;
			}
			set
			{
				if ((this._AttractionName != value))
				{
					this.OnAttractionNameChanging(value);
					this.SendPropertyChanging();
					this._AttractionName = value;
					this.SendPropertyChanged("AttractionName");
					this.OnAttractionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionPrice", DbType="Float NOT NULL")]
		public double AttractionPrice
		{
			get
			{
				return this._AttractionPrice;
			}
			set
			{
				if ((this._AttractionPrice != value))
				{
					this.OnAttractionPriceChanging(value);
					this.SendPropertyChanging();
					this._AttractionPrice = value;
					this.SendPropertyChanged("AttractionPrice");
					this.OnAttractionPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_PriceListAttraction_tbl_AttractionHistory", Storage="_tbl_PriceListAttraction", ThisKey="IDAttractionList", OtherKey="ID", IsForeignKey=true)]
		public tbl_PriceListAttraction tbl_PriceListAttraction
		{
			get
			{
				return this._tbl_PriceListAttraction.Entity;
			}
			set
			{
				tbl_PriceListAttraction previousValue = this._tbl_PriceListAttraction.Entity;
				if (((previousValue != value) 
							|| (this._tbl_PriceListAttraction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_PriceListAttraction.Entity = null;
						previousValue.tbl_AttractionHistories.Remove(this);
					}
					this._tbl_PriceListAttraction.Entity = value;
					if ((value != null))
					{
						value.tbl_AttractionHistories.Add(this);
						this._IDAttractionList = value.ID;
					}
					else
					{
						this._IDAttractionList = default(int);
					}
					this.SendPropertyChanged("tbl_PriceListAttraction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_GateHistory")]
	public partial class tbl_GateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Timestamp;
		
		private int _IDGate;
		
		private int _IDVisit;
		
		private EntityRef<tbl_Gate> _tbl_Gate;
		
		private EntityRef<tbl_Visit> _tbl_Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnIDGateChanging(int value);
    partial void OnIDGateChanged();
    partial void OnIDVisitChanging(int value);
    partial void OnIDVisitChanged();
    #endregion
		
		public tbl_GateHistory()
		{
			this._tbl_Gate = default(EntityRef<tbl_Gate>);
			this._tbl_Visit = default(EntityRef<tbl_Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGate", DbType="Int NOT NULL")]
		public int IDGate
		{
			get
			{
				return this._IDGate;
			}
			set
			{
				if ((this._IDGate != value))
				{
					if (this._tbl_Gate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDGateChanging(value);
					this.SendPropertyChanging();
					this._IDGate = value;
					this.SendPropertyChanged("IDGate");
					this.OnIDGateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDVisit", DbType="Int NOT NULL")]
		public int IDVisit
		{
			get
			{
				return this._IDVisit;
			}
			set
			{
				if ((this._IDVisit != value))
				{
					if (this._tbl_Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDVisitChanging(value);
					this.SendPropertyChanging();
					this._IDVisit = value;
					this.SendPropertyChanged("IDVisit");
					this.OnIDVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Gate_tbl_GateHistory", Storage="_tbl_Gate", ThisKey="IDGate", OtherKey="ID", IsForeignKey=true)]
		public tbl_Gate tbl_Gate
		{
			get
			{
				return this._tbl_Gate.Entity;
			}
			set
			{
				tbl_Gate previousValue = this._tbl_Gate.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Gate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Gate.Entity = null;
						previousValue.tbl_GateHistories.Remove(this);
					}
					this._tbl_Gate.Entity = value;
					if ((value != null))
					{
						value.tbl_GateHistories.Add(this);
						this._IDGate = value.ID;
					}
					else
					{
						this._IDGate = default(int);
					}
					this.SendPropertyChanged("tbl_Gate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Visit_tbl_GateHistory", Storage="_tbl_Visit", ThisKey="IDVisit", OtherKey="ID", IsForeignKey=true)]
		public tbl_Visit tbl_Visit
		{
			get
			{
				return this._tbl_Visit.Entity;
			}
			set
			{
				tbl_Visit previousValue = this._tbl_Visit.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Visit.Entity = null;
						previousValue.tbl_GateHistories.Remove(this);
					}
					this._tbl_Visit.Entity = value;
					if ((value != null))
					{
						value.tbl_GateHistories.Add(this);
						this._IDVisit = value.ID;
					}
					else
					{
						this._IDVisit = default(int);
					}
					this.SendPropertyChanged("tbl_Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Visit")]
	public partial class tbl_Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _StopTime;
		
		private int _IDWatch;
		
		private System.Nullable<int> _IDPriceEntry;
		
		private System.Nullable<int> _IDPass;
		
		private EntitySet<tbl_GateHistory> _tbl_GateHistories;
		
		private EntityRef<tbl_Pass> _tbl_Pass;
		
		private EntityRef<tbl_PriceList> _tbl_PriceList;
		
		private EntityRef<tbl_RFIDWatch> _tbl_RFIDWatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnStopTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStopTimeChanged();
    partial void OnIDWatchChanging(int value);
    partial void OnIDWatchChanged();
    partial void OnIDPriceEntryChanging(System.Nullable<int> value);
    partial void OnIDPriceEntryChanged();
    partial void OnIDPassChanging(System.Nullable<int> value);
    partial void OnIDPassChanged();
    #endregion
		
		public tbl_Visit()
		{
			this._tbl_GateHistories = new EntitySet<tbl_GateHistory>(new Action<tbl_GateHistory>(this.attach_tbl_GateHistories), new Action<tbl_GateHistory>(this.detach_tbl_GateHistories));
			this._tbl_Pass = default(EntityRef<tbl_Pass>);
			this._tbl_PriceList = default(EntityRef<tbl_PriceList>);
			this._tbl_RFIDWatch = default(EntityRef<tbl_RFIDWatch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StopTime
		{
			get
			{
				return this._StopTime;
			}
			set
			{
				if ((this._StopTime != value))
				{
					this.OnStopTimeChanging(value);
					this.SendPropertyChanging();
					this._StopTime = value;
					this.SendPropertyChanged("StopTime");
					this.OnStopTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWatch", DbType="Int NOT NULL")]
		public int IDWatch
		{
			get
			{
				return this._IDWatch;
			}
			set
			{
				if ((this._IDWatch != value))
				{
					if (this._tbl_RFIDWatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDWatchChanging(value);
					this.SendPropertyChanging();
					this._IDWatch = value;
					this.SendPropertyChanged("IDWatch");
					this.OnIDWatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPriceEntry", DbType="Int")]
		public System.Nullable<int> IDPriceEntry
		{
			get
			{
				return this._IDPriceEntry;
			}
			set
			{
				if ((this._IDPriceEntry != value))
				{
					if (this._tbl_PriceList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPriceEntryChanging(value);
					this.SendPropertyChanging();
					this._IDPriceEntry = value;
					this.SendPropertyChanged("IDPriceEntry");
					this.OnIDPriceEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPass", DbType="Int")]
		public System.Nullable<int> IDPass
		{
			get
			{
				return this._IDPass;
			}
			set
			{
				if ((this._IDPass != value))
				{
					if (this._tbl_Pass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPassChanging(value);
					this.SendPropertyChanging();
					this._IDPass = value;
					this.SendPropertyChanged("IDPass");
					this.OnIDPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Visit_tbl_GateHistory", Storage="_tbl_GateHistories", ThisKey="ID", OtherKey="IDVisit")]
		public EntitySet<tbl_GateHistory> tbl_GateHistories
		{
			get
			{
				return this._tbl_GateHistories;
			}
			set
			{
				this._tbl_GateHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Pass_tbl_Visit", Storage="_tbl_Pass", ThisKey="IDPass", OtherKey="ID", IsForeignKey=true)]
		public tbl_Pass tbl_Pass
		{
			get
			{
				return this._tbl_Pass.Entity;
			}
			set
			{
				tbl_Pass previousValue = this._tbl_Pass.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Pass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Pass.Entity = null;
						previousValue.tbl_Visits.Remove(this);
					}
					this._tbl_Pass.Entity = value;
					if ((value != null))
					{
						value.tbl_Visits.Add(this);
						this._IDPass = value.ID;
					}
					else
					{
						this._IDPass = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Pass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_PriceList_tbl_Visit", Storage="_tbl_PriceList", ThisKey="IDPriceEntry", OtherKey="ID", IsForeignKey=true)]
		public tbl_PriceList tbl_PriceList
		{
			get
			{
				return this._tbl_PriceList.Entity;
			}
			set
			{
				tbl_PriceList previousValue = this._tbl_PriceList.Entity;
				if (((previousValue != value) 
							|| (this._tbl_PriceList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_PriceList.Entity = null;
						previousValue.tbl_Visits.Remove(this);
					}
					this._tbl_PriceList.Entity = value;
					if ((value != null))
					{
						value.tbl_Visits.Add(this);
						this._IDPriceEntry = value.ID;
					}
					else
					{
						this._IDPriceEntry = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_PriceList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_RFIDWatch_tbl_Visit", Storage="_tbl_RFIDWatch", ThisKey="IDWatch", OtherKey="ID", IsForeignKey=true)]
		public tbl_RFIDWatch tbl_RFIDWatch
		{
			get
			{
				return this._tbl_RFIDWatch.Entity;
			}
			set
			{
				tbl_RFIDWatch previousValue = this._tbl_RFIDWatch.Entity;
				if (((previousValue != value) 
							|| (this._tbl_RFIDWatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_RFIDWatch.Entity = null;
						previousValue.tbl_Visits.Remove(this);
					}
					this._tbl_RFIDWatch.Entity = value;
					if ((value != null))
					{
						value.tbl_Visits.Add(this);
						this._IDWatch = value.ID;
					}
					else
					{
						this._IDWatch = default(int);
					}
					this.SendPropertyChanged("tbl_RFIDWatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_GateHistories(tbl_GateHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Visit = this;
		}
		
		private void detach_tbl_GateHistories(tbl_GateHistory entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Visit = null;
		}
	}
}
#pragma warning restore 1591
